// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/mq_service.proto.proto

package ibm_mq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MqGrpcService_SendAndReceive_FullMethodName = "/ibm.mq.MqGrpcService/sendAndReceive"
)

// MqGrpcServiceClient is the client API for MqGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqGrpcServiceClient interface {
	SendAndReceive(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error)
}

type mqGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMqGrpcServiceClient(cc grpc.ClientConnInterface) MqGrpcServiceClient {
	return &mqGrpcServiceClient{cc}
}

func (c *mqGrpcServiceClient) SendAndReceive(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, MqGrpcService_SendAndReceive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MqGrpcServiceServer is the server API for MqGrpcService service.
// All implementations must embed UnimplementedMqGrpcServiceServer
// for forward compatibility
type MqGrpcServiceServer interface {
	SendAndReceive(context.Context, *BasicRequest) (*BasicResponse, error)
	mustEmbedUnimplementedMqGrpcServiceServer()
}

// UnimplementedMqGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMqGrpcServiceServer struct {
}

func (UnimplementedMqGrpcServiceServer) SendAndReceive(context.Context, *BasicRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAndReceive not implemented")
}
func (UnimplementedMqGrpcServiceServer) mustEmbedUnimplementedMqGrpcServiceServer() {}

// UnsafeMqGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqGrpcServiceServer will
// result in compilation errors.
type UnsafeMqGrpcServiceServer interface {
	mustEmbedUnimplementedMqGrpcServiceServer()
}

func RegisterMqGrpcServiceServer(s grpc.ServiceRegistrar, srv MqGrpcServiceServer) {
	s.RegisterService(&MqGrpcService_ServiceDesc, srv)
}

func _MqGrpcService_SendAndReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqGrpcServiceServer).SendAndReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MqGrpcService_SendAndReceive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqGrpcServiceServer).SendAndReceive(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MqGrpcService_ServiceDesc is the grpc.ServiceDesc for MqGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MqGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ibm.mq.MqGrpcService",
	HandlerType: (*MqGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendAndReceive",
			Handler:    _MqGrpcService_SendAndReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mq_service.proto.proto",
}
